{"ast":null,"code":"var _jsxFileName = \"/Users/icdoleo/HDocuments/dev/synchrify-frontend/src/routes/Routes.js\";\nimport React from \"react\"; // import PropTypes from \"prop-types\";\n\nimport { Route, Redirect } from \"react-router-dom\";\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n  const signed = true;\n  /**\n   * Redirect user to SignIn page if he tries to access a private route\n   * without authentication.\n   */\n\n  if (isPrivate && !signed) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 12\n      }\n    });\n  }\n  /**\n   * Redirect user to Main page if he tries to access a non private route\n   * (SignIn or SignUp) after being authenticated.\n   */\n\n\n  if (!isPrivate && signed) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 12\n      }\n    });\n  }\n  /**\n   * If not included on both previous cases, redirect user to the desired route.\n   */\n\n\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }));\n}\n/*\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\n\nRouteWrapper.defaultProps = {\n  isPrivate: true //final is true\n};\n*/","map":{"version":3,"sources":["/Users/icdoleo/HDocuments/dev/synchrify-frontend/src/routes/Routes.js"],"names":["React","Route","Redirect","RouteWrapper","component","Component","isPrivate","rest","signed","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA,eAAe,SAASC,YAAT,CAAsB;AACnCC,EAAAA,SAAS,EAAEC,SADwB;AAEnCC,EAAAA,SAFmC;AAGnC,KAAGC;AAHgC,CAAtB,EAIZ;AACD,QAAMC,MAAM,GAAG,IAAf;AAEA;;;;;AAIA,MAAIF,SAAS,IAAI,CAACE,MAAlB,EAA0B;AACxB,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAED;;;;;;AAIA,MAAI,CAACF,SAAD,IAAcE,MAAlB,EAA0B;AACxB,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AAED;;;;;AAGA,sBACE,oBAAC,KAAD,oBACMD,IADN;AAEE,IAAA,MAAM,EAAEE,KAAK,iBACT,oBAAC,SAAD,oBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAQD;AACD","sourcesContent":["import React from \"react\";\n// import PropTypes from \"prop-types\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n  const signed = true;\n\n  /**\n   * Redirect user to SignIn page if he tries to access a private route\n   * without authentication.\n   */\n  if (isPrivate && !signed) {\n    return <Redirect to=\"/\" />;\n  }\n\n  /**\n   * Redirect user to Main page if he tries to access a non private route\n   * (SignIn or SignUp) after being authenticated.\n   */\n  if (!isPrivate && signed) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  /**\n   * If not included on both previous cases, redirect user to the desired route.\n   */\n  return (\n    <Route\n      {...rest}\n      render={props => (\n          <Component {...props} />\n      )}\n    />\n  );\n}\n/*\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\n\nRouteWrapper.defaultProps = {\n  isPrivate: true //final is true\n};\n*/\n"]},"metadata":{},"sourceType":"module"}